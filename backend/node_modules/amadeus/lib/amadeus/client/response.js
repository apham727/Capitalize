'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JSON_CONTENT_TYPES = ['application/json', 'application/vnd.amadeus+json'];

/**
 * The response object returned for every API call.
 *
 * @param {Object} http_response the response object returned from the Node/HTTP
 *  request
 * @param {Request} request the request object used to make this API call
 *
 * @property {number} statusCode the HTTP status code for the response, if any
 * @property {string} body the raw body received from the API
 * @property {Object} result the parsed JSON received from the API
 * @property {Object} data the data attribute taken from the result
 * @property {boolean} parsed wether the raw body has been parsed into JSON
 * @property {Request} request the request object used to make this API call
 *
 */

var Response = function () {
  function Response(http_response, request) {
    _classCallCheck(this, Response);

    var headers = http_response.headers || {};
    this.contentType = headers['content-type'];
    this.statusCode = http_response.statusCode;
    this.request = request;
    this.body = '';
    this.result = null;
    this.data = null;
    this.parsed = false;
  }

  // PROTECTED

  /**
   * Add a chunk received from the API to the body
   *
   * @param  {string} chunk a chunk of data
   * @protected
   */


  _createClass(Response, [{
    key: 'addChunk',
    value: function addChunk(chunk) {
      this.body += chunk;
    }

    /**
     * Tries to parse parse the raw data
     * @protected
     */

  }, {
    key: 'parse',
    value: function parse() {
      try {
        if (this.isJson()) {
          this.result = JSON.parse(this.body);
          this.data = this.result.data;
          this.parsed = true;
        } else {
          this.parsed = false;
        }
      } catch (SyntaxError) {
        this.parsed = false;
      }
    }

    /**
     * Wether this API call can be considered a success. Used to wrap the response
     * into a ResponseError
     *
     * @return {boolean}
     * @protected
     */

  }, {
    key: 'success',
    value: function success() {
      return this.parsed && this.statusCode < 300;
    }

    // PRIVATE


    /**
     * Tests if the content is seemingly JSON
     *
     * @return {boolean}
     * @private
     */

  }, {
    key: 'isJson',
    value: function isJson() {
      return JSON_CONTENT_TYPES.indexOf(this.contentType) !== -1;
    }
  }]);

  return Response;
}();

exports.default = Response;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL2NsaWVudC9yZXNwb25zZS5qcyJdLCJuYW1lcyI6WyJKU09OX0NPTlRFTlRfVFlQRVMiLCJSZXNwb25zZSIsImh0dHBfcmVzcG9uc2UiLCJyZXF1ZXN0IiwiaGVhZGVycyIsImNvbnRlbnRUeXBlIiwic3RhdHVzQ29kZSIsImJvZHkiLCJyZXN1bHQiLCJkYXRhIiwicGFyc2VkIiwiY2h1bmsiLCJpc0pzb24iLCJKU09OIiwicGFyc2UiLCJTeW50YXhFcnJvciIsImluZGV4T2YiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxxQkFBcUIsQ0FBQyxrQkFBRCxFQUFxQiw4QkFBckIsQ0FBekI7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7SUFlTUMsUTtBQUNKLG9CQUFZQyxhQUFaLEVBQTJCQyxPQUEzQixFQUFvQztBQUFBOztBQUNsQyxRQUFJQyxVQUFVRixjQUFjRSxPQUFkLElBQXlCLEVBQXZDO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQkQsUUFBUSxjQUFSLENBQW5CO0FBQ0EsU0FBS0UsVUFBTCxHQUFtQkosY0FBY0ksVUFBakM7QUFDQSxTQUFLSCxPQUFMLEdBQW1CQSxPQUFuQjtBQUNBLFNBQUtJLElBQUwsR0FBbUIsRUFBbkI7QUFDQSxTQUFLQyxNQUFMLEdBQW1CLElBQW5CO0FBQ0EsU0FBS0MsSUFBTCxHQUFtQixJQUFuQjtBQUNBLFNBQUtDLE1BQUwsR0FBbUIsS0FBbkI7QUFDRDs7QUFFRDs7QUFFQTs7Ozs7Ozs7Ozs2QkFNU0MsSyxFQUFPO0FBQ2QsV0FBS0osSUFBTCxJQUFhSSxLQUFiO0FBQ0Q7O0FBR0Q7Ozs7Ozs7NEJBSVE7QUFDTixVQUFJO0FBQ0YsWUFBSSxLQUFLQyxNQUFMLEVBQUosRUFBbUI7QUFDakIsZUFBS0osTUFBTCxHQUFjSyxLQUFLQyxLQUFMLENBQVcsS0FBS1AsSUFBaEIsQ0FBZDtBQUNBLGVBQUtFLElBQUwsR0FBWSxLQUFLRCxNQUFMLENBQVlDLElBQXhCO0FBQ0EsZUFBS0MsTUFBTCxHQUFjLElBQWQ7QUFDRCxTQUpELE1BSU87QUFDTCxlQUFLQSxNQUFMLEdBQWMsS0FBZDtBQUNEO0FBQ0YsT0FSRCxDQVFFLE9BQU9LLFdBQVAsRUFBb0I7QUFDcEIsYUFBS0wsTUFBTCxHQUFjLEtBQWQ7QUFDRDtBQUNGOztBQUVEOzs7Ozs7Ozs7OzhCQU9VO0FBQ1IsYUFBUSxLQUFLQSxNQUFMLElBQWUsS0FBS0osVUFBTCxHQUFrQixHQUF6QztBQUNEOztBQUVEOzs7QUFHQTs7Ozs7Ozs7OzZCQU1TO0FBQ1AsYUFBUU4sbUJBQW1CZ0IsT0FBbkIsQ0FBMkIsS0FBS1gsV0FBaEMsTUFBaUQsQ0FBQyxDQUExRDtBQUNEOzs7Ozs7a0JBR1lKLFEiLCJmaWxlIjoicmVzcG9uc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgSlNPTl9DT05URU5UX1RZUEVTID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3ZuZC5hbWFkZXVzK2pzb24nXTtcblxuLyoqXG4gKiBUaGUgcmVzcG9uc2Ugb2JqZWN0IHJldHVybmVkIGZvciBldmVyeSBBUEkgY2FsbC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaHR0cF9yZXNwb25zZSB0aGUgcmVzcG9uc2Ugb2JqZWN0IHJldHVybmVkIGZyb20gdGhlIE5vZGUvSFRUUFxuICogIHJlcXVlc3RcbiAqIEBwYXJhbSB7UmVxdWVzdH0gcmVxdWVzdCB0aGUgcmVxdWVzdCBvYmplY3QgdXNlZCB0byBtYWtlIHRoaXMgQVBJIGNhbGxcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gc3RhdHVzQ29kZSB0aGUgSFRUUCBzdGF0dXMgY29kZSBmb3IgdGhlIHJlc3BvbnNlLCBpZiBhbnlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBib2R5IHRoZSByYXcgYm9keSByZWNlaXZlZCBmcm9tIHRoZSBBUElcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSByZXN1bHQgdGhlIHBhcnNlZCBKU09OIHJlY2VpdmVkIGZyb20gdGhlIEFQSVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEgdGhlIGRhdGEgYXR0cmlidXRlIHRha2VuIGZyb20gdGhlIHJlc3VsdFxuICogQHByb3BlcnR5IHtib29sZWFufSBwYXJzZWQgd2V0aGVyIHRoZSByYXcgYm9keSBoYXMgYmVlbiBwYXJzZWQgaW50byBKU09OXG4gKiBAcHJvcGVydHkge1JlcXVlc3R9IHJlcXVlc3QgdGhlIHJlcXVlc3Qgb2JqZWN0IHVzZWQgdG8gbWFrZSB0aGlzIEFQSSBjYWxsXG4gKlxuICovXG5jbGFzcyBSZXNwb25zZSB7XG4gIGNvbnN0cnVjdG9yKGh0dHBfcmVzcG9uc2UsIHJlcXVlc3QpIHtcbiAgICBsZXQgaGVhZGVycyA9IGh0dHBfcmVzcG9uc2UuaGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLmNvbnRlbnRUeXBlID0gaGVhZGVyc1snY29udGVudC10eXBlJ107XG4gICAgdGhpcy5zdGF0dXNDb2RlICA9IGh0dHBfcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICB0aGlzLnJlcXVlc3QgICAgID0gcmVxdWVzdDtcbiAgICB0aGlzLmJvZHkgICAgICAgID0gJyc7XG4gICAgdGhpcy5yZXN1bHQgICAgICA9IG51bGw7XG4gICAgdGhpcy5kYXRhICAgICAgICA9IG51bGw7XG4gICAgdGhpcy5wYXJzZWQgICAgICA9IGZhbHNlO1xuICB9XG5cbiAgLy8gUFJPVEVDVEVEXG5cbiAgLyoqXG4gICAqIEFkZCBhIGNodW5rIHJlY2VpdmVkIGZyb20gdGhlIEFQSSB0byB0aGUgYm9keVxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNodW5rIGEgY2h1bmsgb2YgZGF0YVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBhZGRDaHVuayhjaHVuaykge1xuICAgIHRoaXMuYm9keSArPSBjaHVuaztcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRyaWVzIHRvIHBhcnNlIHBhcnNlIHRoZSByYXcgZGF0YVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwYXJzZSgpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuaXNKc29uKCkpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBKU09OLnBhcnNlKHRoaXMuYm9keSk7XG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMucmVzdWx0LmRhdGE7XG4gICAgICAgIHRoaXMucGFyc2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGFyc2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoU3ludGF4RXJyb3IpIHtcbiAgICAgIHRoaXMucGFyc2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdldGhlciB0aGlzIEFQSSBjYWxsIGNhbiBiZSBjb25zaWRlcmVkIGEgc3VjY2Vzcy4gVXNlZCB0byB3cmFwIHRoZSByZXNwb25zZVxuICAgKiBpbnRvIGEgUmVzcG9uc2VFcnJvclxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBzdWNjZXNzKCkge1xuICAgIHJldHVybiAodGhpcy5wYXJzZWQgJiYgdGhpcy5zdGF0dXNDb2RlIDwgMzAwKTtcbiAgfVxuXG4gIC8vIFBSSVZBVEVcblxuXG4gIC8qKlxuICAgKiBUZXN0cyBpZiB0aGUgY29udGVudCBpcyBzZWVtaW5nbHkgSlNPTlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNKc29uKCkge1xuICAgIHJldHVybiAoSlNPTl9DT05URU5UX1RZUEVTLmluZGV4T2YodGhpcy5jb250ZW50VHlwZSkgIT09IC0xKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZXNwb25zZTtcbiJdfQ==