'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// The number of seconds before the token expires, when
// we will already try to refresh it
var TOKEN_BUFFER = 10;

/**
  * A helper library to create and maintain the OAuth2 AccessTokens between
  * requests. Keeps track of the expiry time and automatically tries to fetch
  * a new token if needed.
  *
  * @property {string} accessToken the cached current access token (bearer)
  * @property {number} expiresAt the aproximate time this token expires at
  * @protected
  */

var AccessToken = function () {
  function AccessToken() {
    _classCallCheck(this, AccessToken);

    this.accessToken;
    this.expiresAt;
  }

  // PROTECTED

  /**
   * Fetches or returns a cached bearer token. Used by the Client to get a
   * token before making an API call.
   *
   * @param  {Client} client the Amadeus Client to make an API call with
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   * @protected
   */


  _createClass(AccessToken, [{
    key: 'bearerToken',
    value: function bearerToken(client) {
      var emitter = new _events2.default();
      var promise = this.promise(emitter);
      this.emitOrLoadAccessToken(client, emitter);
      return promise;
    }

    // PRIVATE

    /**
     * Builds a Bluebird promise to be returned to the API user
     *
     * @param  {type} emitter the EventEmitter used to notify the Promise of
     * @return {Promise} a Bluebird promise
     * @private
     */

  }, {
    key: 'promise',
    value: function promise(emitter) {
      return new Promise(function (resolve, reject) {
        emitter.on('resolve', function (response) {
          return resolve(response);
        });
        emitter.on('reject', function (error) {
          return reject(error);
        });
      });
    }

    /**
     * Checks if the token needs a refresh, if not emits the cached token,
     * otherwise tries to load a new access token
     *
     * @param  {Client} client the Amadeus Client to make an API call with
     * @param  {type} emitter the EventEmitter used to emit the token
     * @private
     */

  }, {
    key: 'emitOrLoadAccessToken',
    value: function emitOrLoadAccessToken(client, emitter) {
      if (this.needsLoadOrRefresh()) {
        this.loadAccessToken(client, emitter);
      } else {
        emitter.emit('resolve', this.accessToken);
      }
    }

    /**
     * Checks if the token needs a refresh or first load
     *
     * @return {boolean} wether the token needs a refresh
     * @private
     */

  }, {
    key: 'needsLoadOrRefresh',
    value: function needsLoadOrRefresh() {
      if (!this.accessToken) {
        return true;
      } else if (Date.now() + TOKEN_BUFFER > this.expiresAt) {
        return true;
      } else {
        return false;
      }
    }

    /**
     * Loads the access token using the client, emits the token when it's loaded
     *
     * @param  {Client} client the Amadeus Client to make an API call with
     * @param  {type} emitter the EventEmitter used to emit the token
     * @private
     */

  }, {
    key: 'loadAccessToken',
    value: function loadAccessToken(client, emitter) {
      var _this = this;

      client.unauthenticatedRequest('POST', '/v1/security/oauth2/token', {
        'grant_type': 'client_credentials',
        'client_id': client.clientId,
        'client_secret': client.clientSecret
      }).then(function (response) {
        _this.storeAccessToken(response);
        _this.emitOrLoadAccessToken(client, emitter);
      }).catch(function (error) {
        emitter.emit('reject', error);
      });
    }

    /**
     * Stores a loaded access token, calculating the expiry date
     *
     * @param  {Response} response the response object received from the client
     * @private
     */

  }, {
    key: 'storeAccessToken',
    value: function storeAccessToken(response) {
      this.accessToken = response.result['access_token'];
      this.expiresAt = Date.now() + response.result['expires_in'];
    }
  }]);

  return AccessToken;
}();

exports.default = AccessToken;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL2NsaWVudC9hY2Nlc3NfdG9rZW4uanMiXSwibmFtZXMiOlsiVE9LRU5fQlVGRkVSIiwiQWNjZXNzVG9rZW4iLCJhY2Nlc3NUb2tlbiIsImV4cGlyZXNBdCIsImNsaWVudCIsImVtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJwcm9taXNlIiwiZW1pdE9yTG9hZEFjY2Vzc1Rva2VuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbiIsInJlc3BvbnNlIiwiZXJyb3IiLCJuZWVkc0xvYWRPclJlZnJlc2giLCJsb2FkQWNjZXNzVG9rZW4iLCJlbWl0IiwiRGF0ZSIsIm5vdyIsInVuYXV0aGVudGljYXRlZFJlcXVlc3QiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsInRoZW4iLCJzdG9yZUFjY2Vzc1Rva2VuIiwiY2F0Y2giLCJyZXN1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBLElBQU1BLGVBQWUsRUFBckI7O0FBRUE7Ozs7Ozs7Ozs7SUFTTUMsVztBQUNKLHlCQUFjO0FBQUE7O0FBQ1osU0FBS0MsV0FBTDtBQUNBLFNBQUtDLFNBQUw7QUFDRDs7QUFFRDs7QUFFQTs7Ozs7Ozs7Ozs7O2dDQVFZQyxNLEVBQVE7QUFDbEIsVUFBSUMsVUFBVSxJQUFJQyxnQkFBSixFQUFkO0FBQ0EsVUFBSUMsVUFBVSxLQUFLQSxPQUFMLENBQWFGLE9BQWIsQ0FBZDtBQUNBLFdBQUtHLHFCQUFMLENBQTJCSixNQUEzQixFQUFtQ0MsT0FBbkM7QUFDQSxhQUFPRSxPQUFQO0FBQ0Q7O0FBRUQ7O0FBRUE7Ozs7Ozs7Ozs7NEJBT1FGLE8sRUFBUztBQUNmLGFBQU8sSUFBSUksT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0Q04sZ0JBQVFPLEVBQVIsQ0FBVyxTQUFYLEVBQXNCO0FBQUEsaUJBQVlGLFFBQVFHLFFBQVIsQ0FBWjtBQUFBLFNBQXRCO0FBQ0FSLGdCQUFRTyxFQUFSLENBQVcsUUFBWCxFQUFxQjtBQUFBLGlCQUFTRCxPQUFPRyxLQUFQLENBQVQ7QUFBQSxTQUFyQjtBQUNELE9BSE0sQ0FBUDtBQUlEOztBQUdEOzs7Ozs7Ozs7OzswQ0FRc0JWLE0sRUFBUUMsTyxFQUFTO0FBQ3JDLFVBQUksS0FBS1Usa0JBQUwsRUFBSixFQUErQjtBQUFFLGFBQUtDLGVBQUwsQ0FBcUJaLE1BQXJCLEVBQTZCQyxPQUE3QjtBQUF3QyxPQUF6RSxNQUNLO0FBQUVBLGdCQUFRWSxJQUFSLENBQWEsU0FBYixFQUF3QixLQUFLZixXQUE3QjtBQUE0QztBQUNwRDs7QUFFRDs7Ozs7Ozs7O3lDQU1xQjtBQUNuQixVQUFJLENBQUMsS0FBS0EsV0FBVixFQUF1QjtBQUFFLGVBQU8sSUFBUDtBQUFjLE9BQXZDLE1BQ0ssSUFBS2dCLEtBQUtDLEdBQUwsS0FBYW5CLFlBQWQsR0FBOEIsS0FBS0csU0FBdkMsRUFBa0Q7QUFBRSxlQUFPLElBQVA7QUFBYyxPQUFsRSxNQUNBO0FBQUUsZUFBTyxLQUFQO0FBQWU7QUFDdkI7O0FBR0Q7Ozs7Ozs7Ozs7b0NBT2dCQyxNLEVBQVFDLE8sRUFBUztBQUFBOztBQUMvQkQsYUFBT2dCLHNCQUFQLENBQThCLE1BQTlCLEVBQXNDLDJCQUF0QyxFQUFtRTtBQUNqRSxzQkFBZSxvQkFEa0Q7QUFFakUscUJBQWNoQixPQUFPaUIsUUFGNEM7QUFHakUseUJBQWtCakIsT0FBT2tCO0FBSHdDLE9BQW5FLEVBSUdDLElBSkgsQ0FJUSxVQUFDVixRQUFELEVBQWM7QUFDcEIsY0FBS1csZ0JBQUwsQ0FBc0JYLFFBQXRCO0FBQ0EsY0FBS0wscUJBQUwsQ0FBMkJKLE1BQTNCLEVBQW1DQyxPQUFuQztBQUNELE9BUEQsRUFPR29CLEtBUEgsQ0FPUyxVQUFDWCxLQUFELEVBQVc7QUFDbEJULGdCQUFRWSxJQUFSLENBQWEsUUFBYixFQUF1QkgsS0FBdkI7QUFDRCxPQVREO0FBVUQ7O0FBRUQ7Ozs7Ozs7OztxQ0FNaUJELFEsRUFBVTtBQUN6QixXQUFLWCxXQUFMLEdBQW1CVyxTQUFTYSxNQUFULENBQWdCLGNBQWhCLENBQW5CO0FBQ0EsV0FBS3ZCLFNBQUwsR0FBaUJlLEtBQUtDLEdBQUwsS0FBYU4sU0FBU2EsTUFBVCxDQUFnQixZQUFoQixDQUE5QjtBQUNEOzs7Ozs7a0JBR1l6QixXIiwiZmlsZSI6ImFjY2Vzc190b2tlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcblxuLy8gVGhlIG51bWJlciBvZiBzZWNvbmRzIGJlZm9yZSB0aGUgdG9rZW4gZXhwaXJlcywgd2hlblxuLy8gd2Ugd2lsbCBhbHJlYWR5IHRyeSB0byByZWZyZXNoIGl0XG5jb25zdCBUT0tFTl9CVUZGRVIgPSAxMDtcblxuLyoqXG4gICogQSBoZWxwZXIgbGlicmFyeSB0byBjcmVhdGUgYW5kIG1haW50YWluIHRoZSBPQXV0aDIgQWNjZXNzVG9rZW5zIGJldHdlZW5cbiAgKiByZXF1ZXN0cy4gS2VlcHMgdHJhY2sgb2YgdGhlIGV4cGlyeSB0aW1lIGFuZCBhdXRvbWF0aWNhbGx5IHRyaWVzIHRvIGZldGNoXG4gICogYSBuZXcgdG9rZW4gaWYgbmVlZGVkLlxuICAqXG4gICogQHByb3BlcnR5IHtzdHJpbmd9IGFjY2Vzc1Rva2VuIHRoZSBjYWNoZWQgY3VycmVudCBhY2Nlc3MgdG9rZW4gKGJlYXJlcilcbiAgKiBAcHJvcGVydHkge251bWJlcn0gZXhwaXJlc0F0IHRoZSBhcHJveGltYXRlIHRpbWUgdGhpcyB0b2tlbiBleHBpcmVzIGF0XG4gICogQHByb3RlY3RlZFxuICAqL1xuY2xhc3MgQWNjZXNzVG9rZW4ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmFjY2Vzc1Rva2VuO1xuICAgIHRoaXMuZXhwaXJlc0F0O1xuICB9XG5cbiAgLy8gUFJPVEVDVEVEXG5cbiAgLyoqXG4gICAqIEZldGNoZXMgb3IgcmV0dXJucyBhIGNhY2hlZCBiZWFyZXIgdG9rZW4uIFVzZWQgYnkgdGhlIENsaWVudCB0byBnZXQgYVxuICAgKiB0b2tlbiBiZWZvcmUgbWFraW5nIGFuIEFQSSBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0gIHtDbGllbnR9IGNsaWVudCB0aGUgQW1hZGV1cyBDbGllbnQgdG8gbWFrZSBhbiBBUEkgY2FsbCB3aXRoXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIEJsdWViaXJkIFByb21pc2VcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgYmVhcmVyVG9rZW4oY2xpZW50KSB7XG4gICAgbGV0IGVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLnByb21pc2UoZW1pdHRlcik7XG4gICAgdGhpcy5lbWl0T3JMb2FkQWNjZXNzVG9rZW4oY2xpZW50LCBlbWl0dGVyKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIC8vIFBSSVZBVEVcblxuICAvKipcbiAgICogQnVpbGRzIGEgQmx1ZWJpcmQgcHJvbWlzZSB0byBiZSByZXR1cm5lZCB0byB0aGUgQVBJIHVzZXJcbiAgICpcbiAgICogQHBhcmFtICB7dHlwZX0gZW1pdHRlciB0aGUgRXZlbnRFbWl0dGVyIHVzZWQgdG8gbm90aWZ5IHRoZSBQcm9taXNlIG9mXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEgQmx1ZWJpcmQgcHJvbWlzZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvbWlzZShlbWl0dGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGVtaXR0ZXIub24oJ3Jlc29sdmUnLCByZXNwb25zZSA9PiByZXNvbHZlKHJlc3BvbnNlKSk7XG4gICAgICBlbWl0dGVyLm9uKCdyZWplY3QnLCBlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgdG9rZW4gbmVlZHMgYSByZWZyZXNoLCBpZiBub3QgZW1pdHMgdGhlIGNhY2hlZCB0b2tlbixcbiAgICogb3RoZXJ3aXNlIHRyaWVzIHRvIGxvYWQgYSBuZXcgYWNjZXNzIHRva2VuXG4gICAqXG4gICAqIEBwYXJhbSAge0NsaWVudH0gY2xpZW50IHRoZSBBbWFkZXVzIENsaWVudCB0byBtYWtlIGFuIEFQSSBjYWxsIHdpdGhcbiAgICogQHBhcmFtICB7dHlwZX0gZW1pdHRlciB0aGUgRXZlbnRFbWl0dGVyIHVzZWQgdG8gZW1pdCB0aGUgdG9rZW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGVtaXRPckxvYWRBY2Nlc3NUb2tlbihjbGllbnQsIGVtaXR0ZXIpIHtcbiAgICBpZiAodGhpcy5uZWVkc0xvYWRPclJlZnJlc2goKSkgeyB0aGlzLmxvYWRBY2Nlc3NUb2tlbihjbGllbnQsIGVtaXR0ZXIpOyB9XG4gICAgZWxzZSB7IGVtaXR0ZXIuZW1pdCgncmVzb2x2ZScsIHRoaXMuYWNjZXNzVG9rZW4pOyB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSB0b2tlbiBuZWVkcyBhIHJlZnJlc2ggb3IgZmlyc3QgbG9hZFxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3ZXRoZXIgdGhlIHRva2VuIG5lZWRzIGEgcmVmcmVzaFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbmVlZHNMb2FkT3JSZWZyZXNoKCkge1xuICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbikgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIGVsc2UgaWYgKChEYXRlLm5vdygpICsgVE9LRU5fQlVGRkVSKSA+IHRoaXMuZXhwaXJlc0F0KSB7IHJldHVybiB0cnVlOyB9XG4gICAgZWxzZSB7IHJldHVybiBmYWxzZTsgfVxuICB9XG5cblxuICAvKipcbiAgICogTG9hZHMgdGhlIGFjY2VzcyB0b2tlbiB1c2luZyB0aGUgY2xpZW50LCBlbWl0cyB0aGUgdG9rZW4gd2hlbiBpdCdzIGxvYWRlZFxuICAgKlxuICAgKiBAcGFyYW0gIHtDbGllbnR9IGNsaWVudCB0aGUgQW1hZGV1cyBDbGllbnQgdG8gbWFrZSBhbiBBUEkgY2FsbCB3aXRoXG4gICAqIEBwYXJhbSAge3R5cGV9IGVtaXR0ZXIgdGhlIEV2ZW50RW1pdHRlciB1c2VkIHRvIGVtaXQgdGhlIHRva2VuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBsb2FkQWNjZXNzVG9rZW4oY2xpZW50LCBlbWl0dGVyKSB7XG4gICAgY2xpZW50LnVuYXV0aGVudGljYXRlZFJlcXVlc3QoJ1BPU1QnLCAnL3YxL3NlY3VyaXR5L29hdXRoMi90b2tlbicsIHtcbiAgICAgICdncmFudF90eXBlJyA6ICdjbGllbnRfY3JlZGVudGlhbHMnLFxuICAgICAgJ2NsaWVudF9pZCcgOiBjbGllbnQuY2xpZW50SWQsXG4gICAgICAnY2xpZW50X3NlY3JldCcgOiBjbGllbnQuY2xpZW50U2VjcmV0XG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIHRoaXMuc3RvcmVBY2Nlc3NUb2tlbihyZXNwb25zZSk7XG4gICAgICB0aGlzLmVtaXRPckxvYWRBY2Nlc3NUb2tlbihjbGllbnQsIGVtaXR0ZXIpO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgZW1pdHRlci5lbWl0KCdyZWplY3QnLCBlcnJvcik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcmVzIGEgbG9hZGVkIGFjY2VzcyB0b2tlbiwgY2FsY3VsYXRpbmcgdGhlIGV4cGlyeSBkYXRlXG4gICAqXG4gICAqIEBwYXJhbSAge1Jlc3BvbnNlfSByZXNwb25zZSB0aGUgcmVzcG9uc2Ugb2JqZWN0IHJlY2VpdmVkIGZyb20gdGhlIGNsaWVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RvcmVBY2Nlc3NUb2tlbihyZXNwb25zZSkge1xuICAgIHRoaXMuYWNjZXNzVG9rZW4gPSByZXNwb25zZS5yZXN1bHRbJ2FjY2Vzc190b2tlbiddO1xuICAgIHRoaXMuZXhwaXJlc0F0ID0gRGF0ZS5ub3coKSArIHJlc3BvbnNlLnJlc3VsdFsnZXhwaXJlc19pbiddO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjY2Vzc1Rva2VuO1xuIl19